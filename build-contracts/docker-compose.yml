version: "3.4"
services:

  zookeeper:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    entrypoint: ./bin/zookeeper-server-start.sh
    command:
    - ./config/zookeeper.properties

  kafka:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    links:
    - zookeeper
    entrypoint:
    - ./bin/kafka-server-start.sh
    - ./config/server.properties
    - --override
    -   zookeeper.connect=zookeeper:2181
    - --override
    -   log.retention.hours=-1
    - --override
    -   log.dirs=/var/lib/kafka/data/topics
    - --override
    -   default.replication.factor=1
    - --override
    -   min.insync.replicas=1
    - --override
    -   offsets.retention.minutes=10080
    # For access from dev environment
    - --override
    -   listeners=OUTSIDE://:19092,PLAINTEXT://:9092
    - --override
    -   advertised.listeners=OUTSIDE://localhost:19092,PLAINTEXT://:9092
    - --override
    -   listener.security.protocol.map=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
    - --override
    -   inter.broker.listener.name=PLAINTEXT
    ports:
    - 19092:19092

  source-zookeeper:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    entrypoint: ./bin/zookeeper-server-start.sh
    command:
    - ./config/zookeeper.properties

  source-kafka:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    links:
    - source-zookeeper
    entrypoint:
    - ./bin/kafka-server-start.sh
    - ./config/server.properties
    - --override
    -   zookeeper.connect=source-zookeeper:2181
    - --override
    -   log.retention.hours=-1
    - --override
    -   log.dirs=/var/lib/kafka/data/topics
    - --override
    -   default.replication.factor=1
    - --override
    -   min.insync.replicas=1
    - --override
    -   offsets.retention.minutes=10080
    # For access from dev environment
    - --override
    -   listeners=OUTSIDE://:19192,PLAINTEXT://:9092
    - --override
    -   advertised.listeners=OUTSIDE://localhost:19192,PLAINTEXT://:9092
    - --override
    -   listener.security.protocol.map=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
    - --override
    -   inter.broker.listener.name=PLAINTEXT
    ports:
    - 19192:19192

  pixy:
    depends_on:
    - kafka
    build: ./pixy
    ports:
    - 19090:19090
    command:
    - -tcpAddr
    -  0.0.0.0:19090

  topic2-create:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    depends_on:
    - kafka
    entrypoint:
    - ./bin/kafka-topics.sh
    command:
    - --zookeeper
    -   zookeeper:2181
    - --topic
    -   topic2
    - --create
    - --if-not-exists
    - --partitions
    -   '3'
    - --replication-factor
    -   '1'

  source-topic1-create:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    depends_on:
    - source-kafka
    entrypoint:
    - ./bin/kafka-topics.sh
    command:
    - --zookeeper
    -   source-zookeeper:2181
    - --topic
    -   topic2
    - --create
    - --if-not-exists
    - --partitions
    -   '3'
    - --replication-factor
    -   '1'

  copy1:
    image: yolean/kafka-topics-copy:dev
    depends_on:
    - kafka
    - source-kafka
    labels:
    - com.yolean.build-target
    environment:
    - SOURCE_TOPICS=topic1
    - TARGET_TOPIC=topic2

  test1:
    image: solsson/kafkacat-curl@sha256:524fde292beb0ea8c2afa7211bf5571b6ab163bec7a123dceeb85e7ba21acc50
    labels:
    - com.yolean.build-contract
    depends_on:
    - pixy
    - copy1
    entrypoint:
    - /bin/bash
    - -ce
    command:
    - |
      curl --ipv4 --retry 5 --retry-connrefused http://pixy:19090 -I
      # create topic
      until kafkacat -b kafka:9092 -C -K '=' -t topic1 -o -1 -e; do sleep 3; done
      until kafkacat -b kafka:9092 -C -K '=' -t topic2 -o -1 -e; do sleep 3; done
      # produce to source topic
      now=$$(date --iso-8601=ns)
      echo "Now: $$now"
      echo "test1=$$now" | kafkacat -b kafka:9092 -P -K '=' -t topic1
      # consume, after some wait (can we use kafkacat to ignore old messages and avoid the wait?)
      sleep 1
      consumed=$$(kafkacat -b kafka:9092 -C -K '=' -t topic2 -c 1 -o -1)
      echo "Consumed: $$consumed"
      [ "$$consumed" == "test1=$$now" ] || exit 1
      # copare timestamps
      producedT=$$(kafkacat -b kafka:9092 -C -K '=' -t topic1 -c 1 -o -1 -f '%T')
      consumedT=$$(kafkacat -b kafka:9092 -C -K '=' -t topic2 -c 1 -o -1 -f '%T')
      echo "$$producedT <> $$consumedT ?" && [ "$$producedT" == "$$consumedT" ] || exit 2
      echo "--- End of test ---"
